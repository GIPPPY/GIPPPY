/* Fichero para los maps con los string necesarios para el juego en diferentes idiomas.
   Si se quiere añadir otro idioma al juego, simplemente crear un nuevo map para el idioma. IMPORTANTE respetar los nombres de los índices del map. */

// ESPAÑOL
let map_esp = new Map();
map_esp.set('avanza', "avanza");
map_esp.set('gira', "gira");
map_esp.set('titulo', "Juego sencillo para introducir a la programación en Python");
map_esp.set('btnTraducir', "Traducir a robot");
map_esp.set('btnEjecutar', "Ejecutar programa");
map_esp.set('btnParar', "Parar programa");
map_esp.set('btnNivelMenos', "Reducir Nivel");
map_esp.set('btnNivelMas', "Aumentar Nivel");
map_esp.set('nivel1', "''' NIVEL 1\nEste juego tiene un objetivo: Conseguir que el robot llegue al final del nivel.\n\nPara conseguirlo, tenemos que ordenar al personaje que haga ciertos movimientos -> Estos movimientos son las instrucciones del programa, que deben ser escritas en este panel. Estas instrucciones deben estar escritas en lenguaje Python, y se traducirán a un lenguaje que el robot entienda para cargarlas y que se ejecuten.\n\nEn cada nivel se presentará un reto diferente para aprender las reglas del juego paso a paso. Veremos diferentes obstáculos que se tratan de manera diferente.\nEste primer nivel es el más sencillo, prueba a ejecutar la instrucción...\n'''\n\navanza(4)");
map_esp.set('nivel2', "''' NIVEL 2\nYa hemos visto el funcionamiento del juego y de la instrucción avanza(x), donde x es el número de casillas que avanza el robot.\n\nEste segundo nivel ya es un poco más difícil. Ahora necesitamos algo más. Prueba a ejecutar la secuencia que se ve...\n\n- El robot gira en sentido de las agujas del reloj con la instrucción gira(-x).\n- El robot gira en sentido contrario de las agujas del reloj con la instrucción gira(x).\n'''\n\navanza(5)\ngira(-1)");
map_esp.set('nivel3', "''' NIVEL 3\nIntroducimos ahora un nuevo obstáculo con pinchos. Es más pequeño pero más peligroso!!. Ejecuta para ver qué pasa si chocas con él...\n'''\n\navanza(6)");
map_esp.set('nivel4', "''' NIVEL 4\nEste nivel es más complejo porque la primera fila de obstáculos es aleatoria, por lo que la solución del nivel es diferente cada vez.\n'''\n\ngira(-1)\navanza(2)\ngira(1)");
map_esp.set('nivel5', "''' NIVEL 5\nEl nivel 5 es una variante del nivel 4. Hay un obstáculo aleatorio que varía su posición. Ten cuidado con él y superarás el nivel!!\n'''\n\navanza(5)");
map_esp.set('nivel6', "''' NIVEL 6\nTen cuidado con este nivel, con solo un movimiento erróneo puedes acabar dentro de un callejón sin salida!!\n'''\n\navanza(5)");
map_esp.set('nivel7', "''' NIVEL 7\nEl juego ya está complicándose bastante. Este nivel es aleatorio también, pero vamos a introducir una nueva estructura: CONDICIONALES.\nLos condicionales se basan en la certeza de una condición para ejecutar ciertas instrucciones. En caso de no cumplirse la condición, no se van a ejecutar.\nPISTA: Las condiciones que el robot entiende dependen de su orientación en el tablero: robot_sur, robot_este, robot_norte y robot_oeste. Para ayudarte más, el robot ahora mismo mira hacia el Norte. Fíjate en la brújula. Con esto, ya debes de poder usar los condicionales!!\n\nIMPORTANTE: Mucha atención con los espacios, ya que sucede igual que en el caso del repite(x):\n'''\n\nsi(robot_norte):\n  avanza(1)\n  gira(-1)\nsi(robot_oeste):\n  gira(1)\n  avanza(2)\n  gira(-1)");
map_esp.set('nivel8', "''' NIVEL 8\nVamos avanzando en el juego. Los niveles 12 y 13, como podrás ver, se han diseñado para enseñar el último concepto del juego.\nEl nivel 8 no aporta nada nuevo, pero es uno de los niveles más difícil de superar!!\nEs un nivel completamente aleatorio, excepto la última fila de todas, que si hubiera sido también aleatoria podría cerrar el acceso a la plataforma final y el nivel sería imposible de superar.\n'''\n\navanza(9)");
map_esp.set('nivel9', "''' NIVEL 9\nEn este nivel se introducen las repeticiones de movimientos (bucles). Para evitar escribir mucho texto, se pueden crear repeticiones.\n\nPrueba a ejecutar el código que te ofrecemos, y observa con detenimiento los espacios que se dejan antes de las instrucciones dentro de la repetición.\nOJO: Si no dejas 2 espacios ESTRICTAMENTE, no se va a repetir lo que pongas debajo del repite(x):\n'''\n\nrepite(4):\n  avanza(2)\n  gira(1)");
map_esp.set('nivel10', "''' NIVEL 10\nIntroducimos ahora el concepto de bucle repetitivo con una condición, el cual ejecuta las instrucciones que contiene mientras la condición se cumpla.\n\n¡Atención! Para evitar que entre en un bucle infinito el robot parará después de repetir " + repeticiones_permitidas + " instrucciones.\n'''\n\nmientras(no_choca):\n  avanza(2)\n  gira(1)");
map_esp.set('nivel11', "''' NIVEL 11\nEste nivel es completamente aleatorio, y hay solo un espacio por el que se puede pasar, así que ve con mucho cuidado para superar este nivel.\nEs recomendable intentar superar este nivel más de una vez para probar las diferentes soluciones posibles.\n'''\n\navanza(6)\ngira(-1)");
map_esp.set('nivel12', "''' NIVEL 12\nEn este nivel, casi terminando el juego, se introduce el concepto de testing de código. El testing es una herramienta muy usada para validar el código mediante casos de prueba sobre el estado del programa tras una serie de eventos que modifican el estado.\n\nFUNCIONAMIENTO: La estructura a seguir la puedes ver abajo. Hay que dar un identificador a los casos de prueba para poder ver el resultado. El formato del identificador tiene que ser testcase y un número sin espacios (tal y como se ve abajo).\nLuego hay que introducir una serie de instrucciones que van a modificar el estado del programa. Por último, escribir el oráculo, que es el estado que queremos comprobar tras la ejecución de las instrucciones.\nORÁCULO: La instrucción afirma(estado) es la que fija el oráculo. Los estados posibles son no_avanza (verificar que el robot ha colisionado con un obstáculo liso), pincha (verificar que el robot ha colisionado con un obstáculo de pinchos), choca(verificar que el robot ha llegado a los límites del tablero) y no_cae(verificar que el robot no cae al vacío).\n'''\n\ntestcase1:  #Esto es el identificador\n  avanza(4)  #Esta es la secuencia de instrucciones\n  afirma(pincha)  #Esto es el Oráculo");
//map_esp.set('nivel13', "''' NIVEL 13\nSiguiendo con el concepto de testing de código, utiliza ahora las repeticiones de movimientos o el bucle repetitivo con una condición....\n'''\n\ntestcase1:\n  mientras(no_choca):\n    avanza(2)\n    gira(1)");
map_esp.set('nivel13', "''' NIVEL 13\nEs el nivel más difícil de solucionar, por lo que superar este nivel es pasarse el juego.\nPrueba a hacer algunos casos de prueba antes de solucionar el nivel!\n'''\n\ntestcase1:\n  gira(-1)\n  avanza(3)\n  afirma(pincha)");
map_esp.set('nivel14', "''' NIVEL 14\nEste nivel es especial, trata de encontrar una solución general para resolver cualquier nivel.\n'''\n\nmientras(no_choca):\n  gira(1)\n  avanza(1)\n\nmientras(no_choca):\n  gira(1)\n  avanza(1)");
map_esp.set('traducidoOK', " ** Programa traducido correctamente **");
map_esp.set('errorComentario', "Error, falta ''' para cerrar el comentario!!");
map_esp.set('avisoPinchos', "CUIDADO!! El robot se ha chocado con los pinchos...");
map_esp.set('robotCaido', "El robot ha caído al vacío :( , vuelve a intentarlo!!!");
map_esp.set('nivelSuperado', "Enhorabuena, has superado el nivel!!");
map_esp.set('errorRepite', "ERROR. No se puede hacer un repite() dentro de otro repite()");
map_esp.set('errorInstruccion1', 'ERROR. La instrucción ');
map_esp.set('errorInstruccion2', ' no existe...');
map_esp.set('errorParentesis', "ERROR con los paréntesis, la estructura es: instrucción(parámetro).\nPor ejemplo: avanza(5)");
map_esp.set('errorParametro', "ERROR. No has puesto parámetro de entrada.");
map_esp.set('errorEstructura', "ERROR. Las estructuras tienen que acabar con el carácter ':'\nPor ejemplo: repite(6):");
map_esp.set('errorBucle', "ERROR. No se puede iniciar un bucle con repite(x) dentro de un condicional.");
map_esp.set('errorCondicional', "ERROR. No se puede iniciar un condicional dentro de otro condicional.\nPara crear más condiciones, hazlo en otra línea.");
map_esp.set('errorCondicionalRepite', "ERROR. No se pueden crear condiciones dentro de un repite(x).");
map_esp.set('errorWhile', "ERROR. No se puede hacer un bucle mientras dentro de otro mientras.");
map_esp.set('errorWhileBucle', "ERROR. No se pueden crear bucles dentro de un mientras.");
map_esp.set('errorWhileCondiciones', "ERROR. No se pueden crear condiciones dentro de un mientras.");
map_esp.set('errorBajarNivel', "No se puede decrementar más el nivel!!");
map_esp.set('errorSubirNivel', "No se puede aumentar más el nivel!!");
map_esp.set('robotNorte', "robot_norte");
map_esp.set('robotSur', "robot_sur");
map_esp.set('robotEste', "robot_este");
map_esp.set('robotOeste', "robot_oeste");
map_esp.set('errorCondicionNoExiste', "Condición NO existente...\nCondiciones: robot_norte, robot_sur, robot_este, robot_oeste");
map_esp.set('errorEstructuraNoExiste', "ERROR. Estructura errónea.");
map_esp.set('nivelSuperado', "Enhorabuena, has superado el nivel!!\nLa solución no es la más eficiente. Intenta superar el nivel con menos instrucciones o con parámetros más pequeños!!");
map_esp.set('nivelSuperadoEficiente', "Enhorabuena, has superado el nivel!!\nAdemás, has encontrado la solución más eficiente. Muy bien!!");
map_esp.set('errorTestcase', "ERROR. Los testcases tienen que acabar con la instrucción afirma(estado).");
map_esp.set('errorIdentificador1', "ERROR. El identificador ");
map_esp.set('errorIdentificador2', " ya existe.");
map_esp.set('afirmaNoAvanza', "  afirma(no_avanza)"); 
map_esp.set('afirmaPincha', "  afirma(pincha)");
map_esp.set('afirmaChoca', "  afirma(choca)");
map_esp.set('afirmaNoCae', "  afirma(no_cae)");
map_esp.set('errorTestcaseIdentacion', "ERROR. Las instrucciones dentro de la estructura testcase deben respetar la identación de Python.");
map_esp.set('errorTestcaseBucles', "ERROR. No puede haber bucles dentro de una estructura testcase!!");
map_esp.set('errorTestcaseCondidiones', "ERROR. No puede haber condicionales dentro de una estructura testcase!!");
map_esp.set('errorTestcaseCombinados', "ERROR. No se pueden combinar testcases!! Acaba este y luego inicia otro.");
map_esp.set('errorAfirnaIdentado', "ERROR. La instrucción afirma() tiene que respetar la identación de Python!!");
map_esp.set('errorOraculoNoExiste', "ERROR. Oráculo no existente. Oráculos disponibles: no_avanza, pincha, choca, no_cae");
map_esp.set('errorParametroNoExiste', "ERROR. El tipo del parámetro es erróneo. Las instrucciones avanza, gira y repite reciben un número; las instrucciones si y afirma reciben cadenas de texto");
map_esp.set('alert_gafas','Por superar ' + superados_gafas + ' nivel tu robot ha conseguido ¡¡UNAS GAFAS!!');
map_esp.set('alert_gorro','Por superar ' + superados_gorro + ' niveles tu robot ha conseguido ¡¡UN BIRRETE!!');
map_esp.set('alert_gorrofiesta','Por superar ' + superados_gorrofiesta + ' niveles tu robot ha conseguido ¡¡UN GORRO DE FIESTA!!');
map_esp.set('alert_esposas','Por superar ' + superados_esposas + ' niveles tu robot ha conseguido ¡¡UNAS ESPOSAS!!');
map_esp.set('alert_lazo','Por superar ' + superados_lazo + ' niveles tu robot ha conseguido ¡¡UN LAZO!!');
map_esp.set('alert_medalla','Por superar ' + superados_medalla + ' niveles tu robot ha conseguido ¡¡UNA MEDALLA!!');
map_esp.set('alert_coche','Por superar ' + superados_coche + ' niveles tu robot ha conseguido ¡¡UN COCHE!!');
map_esp.set('btnUsuario', "Identifícate");
map_esp.set('btnClasificacion', "Clasificación");
map_esp.set('nivelesSuperados','¡¡FELICIDADES, HAS SUPERADO TODOS LOS NIVELES!!');
map_esp.set('nombreUsuario','Por favor, indica tu nombre.');
map_esp.set('hola','Hola ');
map_esp.set('nombre','Nombre: ');
map_esp.set('nombreUsuarioSalir','Indica tu nombre para participar en la clasificación.');

// INGLES
let map_eng = new Map();
map_eng.set('avanza', "forward");
map_eng.set('gira', "turn");
map_eng.set('titulo', "Easy game to introduce programming in Python");
map_eng.set('btnTraducir', "Traslate to robot");
map_eng.set('btnEjecutar', "Execute program");
map_eng.set('btnParar', "Stop program");
map_eng.set('btnNivelMenos', "Reduce Level");
map_eng.set('btnNivelMas', "Increase Level");
map_eng.set('nivel1', "''' LEVEL 1\nThis game has only one objective: Help the robot to reach the end of the level by going through the door.\n\nTo do it, we must give the robot instructions to make certain movements. These instructions make up our program and should be written in this panel.The instructions must be written using the language Python, when you click the button -Translate to robot- they will be translated to a language that the robot can understand and execute.\n\nThis is the first level of this game. At each level, we will face a different challenge and learn the game rules step by step. We will face different types of obstacles, each one working in a different way.\nThis first level is the easiest one, try to execute the instruction below...\n'''\n\nforward(4)");
map_eng.set('nivel2', "''' LEVEL 2\nWe have already seen how the game and the instruction forward(x) work. When calling forward(x), x is the number of steps the robot moves on x axis.\nThis second level is a bit more difficult. We will add an instruction to turn the robot around.\n\n- Robot turns clockwise with instruction turn(-x).\n- Robot turns counter clockwise with instruction turn(x).\nTry to execute the instructions sequence...\n'''\n\nforward(5)\nturn(-1)");
map_eng.set('nivel3', "''' LEVEL 3\nIn this level we introduce a new spiked obstacle. It is smaller but more dangerous!!. Execute the given sequence to see what happens when you collide with it...  After that, solve the challenge.\n'''\n\nforward(6)");
map_eng.set('nivel4', "''' LEVEL 4\nThis level is even more difficult because the first obstacles row is placed in random order, so the solution for this level is different each time you play this level.\nNevertheless you have to find a solution that works with all possible placements of the obstacles.\n'''\n\nturn(-1)\nforward(2)\nturn(1)");
map_eng.set('nivel5', "''' LEVEL 5\nLevel 5 is a modification of level 4. There is one random obstacle that changes its position. Stay alert and you will succeed!!\n'''\n\nforward(5)");
map_eng.set('nivel6', "''' LEVEL 6\nTake care with this level, by executing only one wrong movement you may find yourself in a dead end!!\n'''\n\nforward(5)");
map_eng.set('nivel7', "''' LEVEL 7\nThe game is already getting more difficult. This level also has random obstacles. Moreover, we are introducing a new control structure: CONDITIONALS.\nConditionals are based on a condition whose value decides whether or not to execute some instructions. If the condition is not true, instructions are not executed.\nCLUE: The conditions understood by the robot are depending on its orientation on the game: south_robot, east_robot, north_robot and west_robot.To help you, the robot in its starting position is oriented to the North, and the buttons -Reduce Level- and -Increase Level- are placed on the East. Now that you know this, you can use conditionals!!\n\nIMPORTANT: Take care about the identation, conditionals work only with the right identation of 2 spaces as the repeat(x) structure.\n'''\n\nif(north_robot):\n  forward(1)\n  turn(-1)\nif(west_robot):\n  turn(1)\n  forward(2)\n  turn(-1)");
map_eng.set('nivel8', "''' LEVEL 8\nWe are advancing in the game. As you will see, level 12 and 13 are designed to show the last programming concepts.\nLevel 8 has nothing new, but solving this level will be really difficult!!\nThis level is full of randomly places obstacles except for the last obstacles row, that cannot be random because it might create an impossible level.\n'''\n\nforward(9)");
map_eng.set('nivel9', "''' LEVEL 9\nIn this level we are introducing loops. Repetitions are usefull when we need to repeat the same instruction several times. A loop is a control structure which allows a block of instructions, the loop body, to be executed repeatedly in succession.\nTry to execute the given code, be aware of the spaces (identation) before the instructions that are in the loop body.\nIMPORTANT: If you forget to put EXACTLY 2 spaces in from of the instructions, they are not part of the loop body and hence they will not be repeated.\n'''\n\nrepeat(4):\n  forward(2)\n  turn(1)");
map_eng.set('nivel10', "''' LEVEL 10\nNow we are introducing repetitive loops whith a condition, which executes the instructions it contains while the condition is fulfilled.\n\nAttention! To avoid entering an infinite loop the robot will stop after repeating " + repeticiones_permitidas + " instructions.\n'''\n\nwhile(no_crash):\n  forward(2)\n  turn(1)");
map_eng.set('nivel11', "''' LEVEL 11\nIn this level the placement of all obstancles is completely random, and there is only one gap  in the obstacle-rows where the robot can go forward, so think and be careful to success on level 8.\nIt is good to try to complete this level more than once to try some possible different solutions.\n'''\n\nforward(6)\nturn(-1)");
map_eng.set('nivel12', "''' LEVEL 12\nIn this level, testing is introduced. Testing is a very useful way to validate code by creating test cases, taking in acount some events that modify the program state.\n\nHOW IT WORKS: The structure is shown below outside the comment. First, we must give a different identifier to each test case, so we can identify it when we check the results. The identifier should start with the word testcase and a number without blank spaces (as done below in the example).\nThen we must write the instructions that will modify the program state. Last, we need the oracle, that checks that we are in the desired state after executing the instructions.\nORACLE: Oracles are defined by assert(state) instructions. The possible states are:\n\n - not_forwards (robot collided with a normal obstacle and cannot go forward),\n - stabbed (robot collided with a spiked obstacle and was stabbed),\n - collides(robot has reached the outside limits from scenario), and \n - not_falls(robot did not fall from scenario).\n'''\n\ntestcase1:  #This is the identifier\n  forward(4)  #This is the instructions sequence\n  assert(stabbed)  #This is the Oracle");
//map_eng.set('nivel13', "''' NIVEL 13\nContinuing with the concept of code testing, use now the repetitions of movements or the repetitive loop with one condition.\n'''\n\ntestcase1:\n  while(no_crash):\n    forward(2)\n    turn(1)");
map_eng.set('nivel13', "''' LEVEL 13\nThis level ends the game. It is the most difficult level, so completing this level literally means passing the game.\nTry to execute some testcases to check different states before finding the solution!\n'''\n\ntestcase1:\n  turn(-1)\n  forward(3)\n  assert(stabbed)");
map_eng.set('nivel14', "''' NIVEL 14\nThis level is special, try to find a general solution to solve any level.\n'''\n\nwhile(no_crash):\n  turn(1)\n  forward(1)");
map_eng.set('traducidoOK', " ** Program correctly translated **");
map_eng.set('errorComentario', "ERROR, missing ''' to close comment!!");
map_eng.set('avisoPinchos', "CARE!! Robot collided with spiked obstacle...");
map_eng.set('robotCaido', "Robot fell into the emptiness :( , try again!!!");
map_eng.set('nivelSuperado', "Congratulations, you have completed the level!!");
map_eng.set('errorRepite', "ERROR. You can't use instruction repeat() inside another repeat()");
map_eng.set('errorInstruccion1', "ERROR. Instruction ");
map_eng.set('errorInstruccion2', " not found...");
map_eng.set('errorParentesis', "ERROR in parenthesis, the correct way is: instruction(parameter).\nFor example: forward(5)");
map_eng.set('errorParametro', "ERROR. You haven't written any input parameter.");
map_eng.set('errorEstructura', "ERROR. Structures must end with character ':'\nFor example: repeat(6):");
map_eng.set('errorBucle', "ERROR. Loops with repeat(x) can't be created inside conditional structures.");
map_eng.set('errorCondicional', "ERROR. Conditional structures can't be created inside other conditionals.\nTo create other conditions, write them in new lines.");
map_eng.set('errorCondicionalRepite', "ERROR. Conditional structures can't be created inside repeat(x).");
map_eng.set('errorWhile', "ERROR. While instructions can't be inside another while.");
map_eng.set('errorWhileBucle', "ERROR. Loops are not allowed inside while instructions.");
map_eng.set('errorWhileCondiciones', "ERROR. Conditional structures inside while instructions.");
map_eng.set('errorBajarNivel', "You can't reduce the level any more!!!");
map_eng.set('errorSubirNivel', "You can't increase the level any more!!");
map_eng.set('robotNorte', "north_robot");
map_eng.set('robotSur', "south_robot");
map_eng.set('robotEste', "east_robot");
map_eng.set('robotOeste', "west_robot");
map_eng.set('errorCondicionNoExiste', "Condition NOT found...\nAvailable conditions: north_robot, south_robot, east_robot, west_robot");
map_eng.set('errorEstructuraNoExiste', "ERROR. Wrong structure.");
map_eng.set('nivelSuperado', "Congratulations, you have completed the level!!\nYour solution is not the most efficient. Try again by using less instructions or by using smaller parameters!!",);
map_eng.set('nivelSuperadoEficiente', "Congratulations, you have completed the level!!\nYou also found the most efficient solution. Good job!!");
map_eng.set('errorTestcase', "ERROR. Testcases must finish with the instruction assert(state).");
map_eng.set('errorIdentificador1', "ERROR. Testcase identifier ");
map_eng.set('errorIdentificador2', " already exists.");
map_eng.set('afirmaNoAvanza', "  assert(not_forwards)"); 
map_eng.set('afirmaPincha', "  assert(stabbed)");
map_eng.set('afirmaChoca', "  assert(collides)");
map_eng.set('afirmaNoCae', "  assert(not_falls)");
map_eng.set('errorTestcaseIdentacion', "ERROR. Inside a testcase structure, instructions must respect Python identation!!");
map_eng.set('errorTestcaseBucles', "ERROR. Loops are not allowed inside a testcase structure!!");
map_eng.set('errorTestcaseCondiciones', "ERROR. Conditionals are not allowed inside a testcase structure!!");
map_eng.set('errorTestcaseCombinados', "ERROR. You can't combine testcases!! First, close this one, and then create another.");
map_eng.set('errorAfirnaIdentado', "ERROR. Instruction assert() must respect Python identation!!");
map_eng.set('errorOraculoNoExiste', "ERROR. Oracle NOT found. Available oracles: not_forwards, stabbed, collides, not_falls");
map_eng.set('errorParametroNoExiste', "ERROR. Parameter type is wrong. Forward, turn and repeat need a number; if and assert need a text string");
map_eng.set('alert_gafas','For passing ' + superados_gafas + ' levels your robot has won a GLASSES!!');
map_eng.set('alert_gorro','For passing ' + superados_gorro + ' levels your robot has won a CAP!!');
map_eng.set('alert_gorrofiesta','For passing ' + superados_gorrofiesta + ' levels your robot has won a PARTY HAT!!');
map_eng.set('alert_esposas','For passing ' + superados_esposas + ' levels your robot has won a HANDCUFFS!!');
map_eng.set('alert_lazo','For passing ' + superados_lazo + ' levels your robot has won a HAIR BOW!!');
map_eng.set('alert_medalla','For passing ' + superados_medalla + ' levels your robot has won a MEDAL!!');
map_eng.set('alert_coche','For passing ' + superados_coche + ' levels your robot has won a CAR!!');
map_eng.set('btnUsuario', "Identify");
map_eng.set('btnClasificacion', "Ranking");
map_eng.set('nivelesSuperados','CONGRATULATIONS, YOU HAVE PASSED ALL LEVELS!!!!');
map_eng.set('nombreUsuario','Please, indicate your name.');
map_eng.set('hola','Hello ');
map_eng.set('nombre','Name: ');
map_eng.set('nombreUsuarioSalir','Indicate your name to participate in the ranking.');

// VALENCIANO
let map_vlc = new Map();
map_vlc.set('avanza', "avança");
map_vlc.set('gira', "gira");
map_vlc.set('titulo', "Joc sencill per a introducirse a la programació amb Python");
map_vlc.set('btnTraducir', "Traduir a robot");
map_vlc.set('btnEjecutar', "Executar programa");
map_vlc.set('btnParar', "Parar programa");
map_vlc.set('btnNivelMenos', "Reduir Nivell");
map_vlc.set('btnNivelMas', "Aumentar Nivell");
map_vlc.set('nivel1', "''' NIVELL 1\nEste joc té un objectiu: Aconseguir que el robot arribe al final del nivell.\n\nPer a aconseguir-ho, hem d´ordenar al personatge que faça certs moviments -> Estos moviments són les instruccions del programa, que han de ser escrites en este panell. Estes instruccions han d´estar escrites en llenguatge Python, i es traduiran a un llenguatge que el robot entenga per a carregar-les i que s´executen.\n\nEn cada nivell es presentarà un repte diferent per a aprendre les regles del joc pas a pas. Veurem diferents obstacles que es tracten de manera diferent.\nEste primer nivell és el més senzill, prova a executar la instrucció...\n'''\n\navanza(4)");
map_vlc.set('nivel2', "''' NIVELL 2\nJa hem vist el funcionament del joc i de la instrucció avança (x), on x és el nombre de caselles que avança el robot.\nEste segon nivell ja és un poc més difícil. Ara necessitem un poc més. Prova a executar la seqüència que es veu...\n\n- El robot gira en sentit de les agulles del rellotge amb la instrucció gira(-x).\n- El robot gira en sentit contrari de les agulles del rellotge amb la instrucció gira(x).\n'''\n\navanza(5)\ngira(-1)");
map_vlc.set('nivel3', "''' NIVELL 3\nIntroduïm ara un nou obstacle amb punxes. És més xicotet però més perillós!! . Executa per a veure què passa si xoques amb ell...\n'''\n\navanza(6)");
map_vlc.set('nivel4', "''' NIVELL 4\nEste nivell és més complexe perquè la primera fila d´obstacles és aleatòria, per la qual cosa la solució del nivell és diferent cada vegada.\n'''\n\ngira(-1)\navanza(2)\ngira(1)");
map_vlc.set('nivel5', "''' NIVELL 5\nEl nivell 5 és una variant del nivell 4. Hi ha un obstacle aleatori que varia la seua posició. Vés en compte amb ell i superaràs el nivell!!\n'''\n\navanza(5)");
map_vlc.set('nivel6', "''' NIVELL 6\nVés en compte amb este nivell, amb només un moviment erroni pots acabar dins d´un carreró sense eixida!!\n'''\n\navanza(5)");
map_vlc.set('nivel7', "''' NIVELL 7\nEl joc ja està complicant-se prou. Este nivell és aleatori també, però introduirem una nova estructura: CONDICIONAL.\nEls condicional es basen en la certesa d´una condició per a executar certes instruccions. En cas de no complir-se la condició, no es van a executar.\nPISTA: Les condicions que el robot entén depenen de la seua orientació en el tauler: robot_sur, robot_este, robot_norte i robot_oeste. Per a ajudar-te més, el robot ara mateix mira cap al Nord, i els botons de Reduir Nivell y Aumentar Nivell es troben a l´Est del robot. Amb açò, ja deus de poder usar els condicional!!\n\nIMPORTANT: Molta atenció amb els espais, ja que succeïx igual que en el cas del repite(x):\n'''\n\nsi(robot_norte):\n  avanza(1)\n  gira(-1)\nsi(robot_oeste):\n  gira(1)\n  avanza(2)\n  gira(-1)");
map_vlc.set('nivel8', "''' NIVELL 8\nAnem avançant en el joc. Els nivells 12 i 13, com podràs veure, s´han dissenyat per a ensenyar l´últim concepte del joc.\nEl nivell 7 no aporta res de nou, però és un dels nivells més difícil de superar!!\nÉs un nivell completament aleatori, excepte l´última fila de totes, que si haguera sigut també aleatòria podria tancar l´accés a la plataforma final i el nivell seria impossible de superar.\n'''\n\navanza(9)");
map_vlc.set('nivel9', "''' NIVELL 9\nEn este nivell s´introduïxen les repeticions de moviments (bucles). Per a evitar escriure molt text, es poden crear repeticions.\nProva a executar el codi que t´oferim, i observa amb deteniment els espais que es deixen abans de les instruccions dins de la repetició.\nULL: Si no deixes 2 espais ESTRICTAMENT, no es va a repetir el que poses davall del repite(x):\n'''\n\nrepite(4):\n  avanza(2)\n  gira(1)");
map_vlc.set('nivel10', "''' NIVELL 10\nS'introduïx ara el concepte de bucle repetitiu, el qual executa las instrucciones que conté mentres la condició es cumplisca.\n\nAtenció! Per a evitar que entre en un bucle infinit el robot pararà després de repetir " + repeticiones_permitidas + " instruccions.\n'''\n\nmientras(no_choca):\n  avanza(2)\n  gira(1)");
map_vlc.set('nivel11', "''' NIVELL 11\nEste nivell és completament aleatori, i hi ha només un espai pel qual es pot passar, així que veu amb molt atenció per a superar este nivell.\nÉs recomanable intentar superar este nivell més d´una vegada per a provar les diferents solucions possibles.\n'''\n\navanza(6)\ngira(-1)");
map_vlc.set('nivel12', "''' NIVELL 12\nEn este nivell, quasi acabant el joc, s´introduïx el concepte de testing de codi. El testing és una ferramenta molt usada per a validar el codi per mitjà de casos de prova sobre l´estat del programa després d´una sèrie d´esdeveniments que modifiquen l´estat.\n\nFUNCIONAMENT: L´estructura que s´ha de seguir la pots veure baix. Cal donar un identificador als casos de prova per a poder veure el resultat. El format de l´identificador té que ser testcase i un número sense espais (tal com es veu baix.\nDesprés cal introduir una sèrie d´instruccions que modificaran l´estat del programa. Finalment, escriure l´oracle, que és l´estat que volem comprovar després de l´execució de les instruccions.\nORACLE: La instrucció afirma(estat) és la que fixa l´oracle. Els estats possibles són no_avanza (verificar que el robot ha col·lidit amb un obstacle llis), punxa (verificar que el robot ha col·lidit amb un obstacle de punxes), xoca (verificar que el robot ha arribat als límits del tauler) i no_cae (verificar que el robot no cau al buit).\n'''\n\ntestcase1:  #Este és l´identificador\n  avanza(4)  #Esta és la seqüència d´instruccions\n  afirma(pincha)  #Açò és l´Oracle");
//map_vlc.set('nivel13', "''' NIVELL 13\Continuant amb el concepte de testing de codi, utilitza ara les repeticions de moviments o el bucle repetitiu amb una condició.\n'''\n\ntestcase1:\n  mientras(no_choca):\n    avanza(2)\n    gira(1)");
map_vlc.set('nivel13', "''' NIVELL 13\nAmb este nivell s´acaba el joc. És el nivell més difícil de solucionar, per la qual cosa superar este nivell és passar-se el joc.\nProva a fer alguns casos de prova abans de solucionar el nivell!\n'''\n\ntestcase1:\n  gira(-1)\n  avanza(3)\n  afirma(pincha)");
map_vlc.set('nivel14', "''' NIVELL 14\nEste nivell es especial, tracta de trovar una solució general para resoldre qualsevol nivell que no tenga punxes.\n'''\n\nmientras(no_choca):\n  gira(1)\n  avanza(1)\n\nmientras(no_choca):\n  gira(1)\n  avanza(1)");
map_vlc.set('traducidoOK', " ** Programa traduït correctament **");
map_vlc.set('errorComentario', "Error, falta ''' per a tancar el comentari!!");
map_vlc.set('avisoPinchos', "ATENCIÓ!! El robot s'ha xocat amb les punxes...");
map_vlc.set('robotCaido', "El robot ha caigut al buit :( torna a intentar-ho!!!");
map_vlc.set('nivelSuperado', "Enhorabona, has superat el nivell!!");
map_vlc.set('errorRepite', "ERROR. No es pot fer un repite() dins d'un altre repite()");
map_vlc.set('errorInstruccion1', "ERROR. La instrucció ");
map_vlc.set('errorInstruccion2',  " no existix...");
map_vlc.set('errorParentesis', "ERROR amb els parèntesis, l'estructura és: instrucció (paràmetre).\nPer exemple: avanza(5)");
map_vlc.set('errorParametro', "ERROR. No has posat paràmetre d'entrada.");
map_vlc.set('errorEstructura', "ERROR. Les estructures han d'acabar amb el caràcter ':'\nPer exemple: repite(6):");
map_vlc.set('errorBucle', "ERROR. No es pot iniciar un bucle amb repite(x) dins d'un condicional.");
map_vlc.set('errorCondicional', "ERROR. No es pot iniciar un condicional dins d'un altre condicional.\nPer a crear més condicions, fes-ho en una altra línia.");
map_vlc.set('errorCondicionalRepite', "ERROR. No es poden crear condicions dins d'un repite(x).");
map_vlc.set('errorWhile', "ERROR. No es pot fer un buble mientras dins de una altra instrucció mientras.");
map_vlc.set('errorWhileBucle', "ERROR. No es poden fer bucles dins de instruccions mientras.");
map_vlc.set('errorWhileCondiciones', "ERROR. No es poden afegir condicions dins de instruccions mientras.");
map_vlc.set('errorBajarNivel', "No es pot decrementar més el nivell!!");
map_vlc.set('errorSubirNivel', "No es pot aumentar més el nivell!!");
map_vlc.set('robotNorte', "robot_norte");
map_vlc.set('robotSur', "robot_sur");
map_vlc.set('robotEste', "robot_este");
map_vlc.set('robotOeste', "robot_oeste");
map_vlc.set('errorCondicionNoExiste', "Condició NO existent...\nCondicions: robot_norte, robot_sur, robot_este, robot_oeste");
map_vlc.set('errorEstructuraNoExiste', "ERROR. Estructura errònia.");
map_vlc.set('nivelSuperado', "Enhorabona, has superat el nivell!!\nLa solució no és la més eficient. Intenta superar el nivell amb menys instruccions o amb paràmetres més xicotets!!");
map_vlc.set('nivelSuperadoEficiente', "Enhorabona, has superat el nivell!!\nA més, has trobat la solució més eficient. Molt bé!!");
map_vlc.set('errorTestcase', "ERROR. Els testcases han d'acabar amb la instrucció afirma(estado).");
map_vlc.set('errorIdentificador1', "ERROR. L'identificador ");
map_vlc.set('errorIdentificador2', " ja existix.");
map_vlc.set('afirmaNoAvanza', "  afirma(no_avanza)"); 
map_vlc.set('afirmaPincha', "  afirma(pincha)");
map_vlc.set('afirmaChoca', "  afirma(choca)");
map_vlc.set('afirmaNoCae', "  afirma(no_cae)");
map_vlc.set('errorTestcaseIdentacion', "ERROR. Les instruccions dins de l'estructura testcase han de respectar la identació de Python.");
map_vlc.set('errorTestcaseBucles', "ERROR. No pot haver-hi bucles dins d'una estructura testcase!!");
map_vlc.set('errorTestcaseCondiciones', "ERROR. No pot haver-hi condicional dins d'una estructura testcase!!");
map_vlc.set('errorTestcaseCombinados', "ERROR. No es poden combinar testcases!! Acaba este i després inicia un altre.");
map_vlc.set('errorAfirnaIdentado', "ERROR. La instrucció afirma() ha de respectar la identació de Python!!");
map_vlc.set('errorOraculoNoExiste', "ERROR. Oracle no existent. Oracles disponibles: no_avanza, pincha, choca, no_cae");
map_vlc.set('errorParametroNoExiste', "ERROR. El tipus del paràmetre és erroni. Les instruccions avança, gira i repetix reben un número; les instruccions si i afirma reben cadenes de text");
map_vlc.set('alert_gafas','Per superar ' + superados_gafas + ' nivells el teu robot ha aconseguit ¡¡UNES ULLERES!!');
map_vlc.set('alert_gorro','Per superar ' + superados_gorro + ' nivells el teu robot ha aconseguit ¡¡UN BIRRET!!');
map_vlc.set('alert_gorrofiesta','Per superar ' + superados_gorrofiesta + ' nivells el teu robot ha aconseguit ¡¡UNA GORRA DE FESTA!!');
map_vlc.set('alert_esposas','Per superar ' + superados_esposas + ' nivells el teu robot ha aconseguit ¡¡UNAS ESPOSAS!!');
map_vlc.set('alert_lazo','Per superar ' + superados_lazo + ' nivells el teu robot ha aconseguit ¡¡UN LLAÇ!!');
map_vlc.set('alert_medalla','Per superar ' + superados_medalla + ' nivells el teu robot ha aconseguit ¡¡UNA MEDALLA!!');
map_vlc.set('alert_coche','Per superar ' + superados_coche + ' nivells el teu robot ha aconseguit ¡¡UN COTXE!!');
map_vlc.set('btnUsuario', "Identificat");
map_vlc.set('btnClasificacion', "Classificació");
map_vlc.set('nivelesSuperados','FELICITATS, HAS SUPERAT TOTS ELS NIVELLS!!');
map_vlc.set('nombreUsuario','Per favor, indica el teu nom.');
map_vlc.set('hola','Hola ');
map_vlc.set('nombre','Nom: ');
map_vlc.set('nombreUsuarioSalir','Indica el teu nom per participar a la clasificació.');

// PORTUGUES
let map_por = new Map();
map_por.set('avanza', "forward");
map_por.set('gira', "turn");
map_por.set('titulo', "Jogo simples para introduzirà programação em Python");
map_por.set('btnTraducir', "Traduzir para robô");
map_por.set('btnEjecutar', "Executar programa");
map_por.set('btnParar', "Parar o programa");
map_por.set('btnNivelMenos', "Reduzir o Nível");
map_por.set('btnNivelMas', "Aumentar o Nível");
map_por.set('nivel1', "''' NÍVEL 1\nEste jogo tem um objetivo: levar o robô até ao fim do nível.\n\nPara o conseguir, temos de orientar o personagem a fazer certos movimentos -> Estes movimentos são as instruções do programa, que devem ser escritas neste painel. Estas instruções devem ser escritas em linguagem Python, e serão traduzidas para uma língua que o robô compreenda, a fim de as carregar e executar.\n\nCada nível irá apresentar um desafio diferente para aprender as regras do jogo passo a passo. Veremos diferentes obstáculos que são tratados de forma diferente.\nEste primeiro nível é o mais simples, tente executar a instrução...\n'''\n\nforward(4)");
map_por.set('nivel2', "''' NÍVEL 2\nJá vimos como funciona o jogo e como funciona a instrução forward(x), onde x é o número de quadrados que o robô avança.\n\nEste segundo nível já é um pouco mais difícil. Agora precisamos de algo mais. Tente executar a sequência mostrada...\n\n- O robô gira no sentido dos ponteiros do relógio com a instrução de turn(-x).\n- O robô gira no sentido contrário ao dos ponteiros do relógio com a instrução de turn(x).\n'''\n\nforward(5)\nturn(-1)");
map_por.set('nivel3', "''' NÍVEL 3\nIntroduzimos agora um novo obstáculo com picos. É mais pequeno mas mais perigoso! Corre para ver o que acontece se lhe acertas....\n'''\n\nforward(6)");
map_por.set('nivel4', "''' NÍVEL 4\nEste nível é mais complexo porque a primeira fila de obstáculos é aleatória, pelo que a solução para o nível é diferente de cada vez.\n'''\n\nturn(-1)\nforward(2)\nturn(1)");
map_por.set('nivel5', "''' NÍVEL 5\nO nível 5 é uma variante do nível 4. Existe um obstáculo aleatório que varia a sua posição. Se tiveres cuidado com isso e passarás de nível!!\n'''\n\nforward(5)");
map_por.set('nivel6', "''' NÍVEL 6\nTemcuidado com este nível, com apenas um movimento errado pode acabar num beco sem saída!!\n'''\n\nforward(5)");
map_por.set('nivel7', "''' NÍVEL 7\nO jogo já está a tornar-se bastante complicado. Este nível também é aleatório, mas vamos introduzir uma nova estrutura: CONDICIONAIS.\nOs condicionamentos baseiam-se na certeza de uma condição para executar certas instruções. Se a condição não for cumprida, não serão executados.\nDICA: As condições que o robô compreende dependem da sua orientação no quadro: south_robot, east_robot, north_robot e west_robot. Para  ajudar-te mais, o robô está agora virado para norte. Observa a bússola. Com isto, deverás usar condicionadores!!\n\nIMPORTANTE: Tenha cuidado com os espaços, pois este é o mesmo que no caso de repeat(x):\n'''\n\nif(north_robot):\n  forward(1)\n  turn(-1)\nif(west_robot):\n  turn(1)\n  forward(2)\n  turn(-1)");
map_por.set('nivel8', "''' NÍVEL 8\nEstamos a avançar no jogo. Os níveis 12 e 13, como podem ver, são concebidos para ensinar o último conceito do jogo.\nO nível 8 não traz nada de novo, mas é um dos níveis mais difíceis de vencer!!\nÉ um nível completamente aleatório, exceto na última fila de todas, que se também tivesse sido aleatória poderia fechar o acesso à plataforma final e o nível seria impossível de passar.\n'''\n\nforward(9)");
map_por.set('nivel9', "''' NÍVEL 9\nA este nível, são introduzidas repetições de movimentos (ciclos). Para evitar escrever muito texto, podem ser criadas repetições.\n\nTente executar o código fornecido, e anote cuidadosamente os espaços deixados antes das instruções dentro da repetição.\nAVISO: Se não deixar 2 espaços ESTRITAMENTE, o que colocar sob a repeat(x) não será repetido:\n'''\n\nrepeat(4):\n  forward(2)\n  turn(1)");
map_por.set('nivel10', "''' NÍVEL 10\nIntroduzimos agora o conceito de um ciclo repetitivo com uma condição, que executa as instruções que contém, desde que a condição seja cumprida.\n\nAtenção! Para evitar que o robô entre num ciclo infinito, o robô vai parar depois de repetir " + repeticiones_permitidas + " instruções.\n'''\n\nwhile(no_crash):\n  forward(2)\n  turn(1)");
map_por.set('nivel11', "''' NÍVEL 11\nEste nível é completamente aleatório, e só há um espaço para passar, por isso tem muito cuidado para passar este nível.\nÉ aconselhável tentar passar este nível mais de uma vez para testar as diferentes soluções possíveis.\n'''\n\nforward(6)\nturn(-1)");
map_por.set('nivel12', "''' NÍVEL 12\nA este nível, perto do fim do jogo, é introduzido o conceito de teste de código. Os testes são uma ferramenta amplamente utilizada para validar o código através de casos de teste sobre o estado do programa após uma série de eventos que modificam o estado.\n\nOPERAÇÃO: A estrutura a acompanhar pode ser vista abaixo. É necessário dar um identificador aos casos de teste para se poder ver o resultado. O formato do identificador tem de ser testcase e um número sem espaços (como se vê abaixo).\nDepois temos de introduzir uma série de instruções que vão modificar o estado do programa. Finalmente, escrever o oráculo, que é o estado que queremos verificar depois de as instruções terem sido executadas.\nORÁCULO: A instrução de asserção é a que estabelece o oráculo. Os estados possíveis são not_forwards (verificar se o robô colidiu com um obstáculo liso), stabbed (verificar se o robô colidiu com um obstáculo com picos), collides (verificar se o robô atingiu os limites do tabuleiro) e no_falls (verificar se o robô não caiu no vazio).\n'''\n\ntestcase1:  #Este é o identificador\n  forward(4)  #Esta é a sequência de instruções\n  assert(stabbed)  #Este é o Oráculo");
//map_por.set('nivel13', "''' NÍVEL 13\nContinuando com o conceito de teste de código, utiliza agora as repetições de movimentos ou o ciclo repetitivo com uma condição....\n'''\n\ntestcase1:\n  while(no_crash):\n    forward(2)\n    turn(1)");
map_por.set('nivel13', "''' NÍVEL 13\nEste é o nível mais difícil de resolver, por isso vencer este nível é a melhor forma de passar no jogo. Tenta fazer alguns casos de teste antes de resolver o nível!\n'''\n\ntestcase1:\n  turn(-1)\n  forward(3)\n  assert(stabbed)");
map_por.set('nivel14', "''' NÍVEL 14\nEste nível é especial, tenta encontrar uma solução geral para resolver qualquer nível.\n'''\n\while(no_crash):\n  turn(1)\n  forward(1)\n\nwhile(no_crash):\n  turn(1)\n  forward(1)");
map_por.set('traducidoOK', " ** Programa corretamente traduzido **");
map_por.set('errorComentario', "Erro, falta '''' para encerrar o comentário!!");
map_por.set('avisoPinchos', "ATENÇÃO! O robô colidiu com os picos...");
map_por.set('robotCaido', "O robô caiu no vazio :( , tente novamente!!!");
map_por.set('nivelSuperado', "Parabéns, passou o nível!!");
map_por.set('errorRepite', "ERRO. Não se pode fazer um repeat() dentro de um repeat().");
map_por.set('errorInstruccion1', 'ERRO. A instrução ');
map_por.set('errorInstruccion2', ' não  existe...');
map_por.set('errorParentesis', "ERRO com parênteses, a estrutura é: instrução(parâmetro).\nPor exemplo: forward(5)");
map_por.set('errorParametro', "ERRO. Não foi definido um parâmetro de entrada.");
map_por.set('errorEstructura', "ERRO. As estruturas devem terminar com o ':' carácter''.\nPor exemplo: repeat(6):");
map_por.set('errorBucle', "ERRO. Não se pode iniciar um ciclo com repeat(x) dentro de um condicional.");
map_por.set('errorCondicional', "ERRO. Não se pode iniciar um condicional dentro de outro condicional. Para criar mais condições, faça-o noutra linha.");
map_por.set('errorCondicionalRepite', "ERRO. Não é possível criar condições dentro de uma repeat(x).");
map_por.set('errorWhile', "ERRO. Não se pode fazer um ciclo de tempo dentro de um ciclo de tempo.");
map_por.set('errorWhileBucle', "ERRO. Não é possível criar ciclos dentro de uma condição.");
map_por.set('errorWhileCondiciones', "ERRO. Não se pode criar condições dentro de uma condição.");
map_por.set('errorBajarNivel', "O nível não pode ser diminuído!!");
map_por.set('errorSubirNivel', "O nível não pode ser aumentado!!");
map_por.set('robotNorte', "north_robot");
map_por.set('robotSur', "south_robot");
map_por.set('robotEste', "east_robot");
map_por.set('robotOeste', "west_robot");
map_por.set('errorCondicionNoExiste', "Condição NÃO existente...\Condições: north_robot, south_robot, east_robot, west_robot");
map_por.set('errorEstructuraNoExiste', "ERRO. Estrutura errada.");
map_por.set('nivelSuperado', "Parabéns, passou o nível!!\nA solução não é a mais eficiente. Tenta passar o nível com menos instruções ou parâmetros menores!!");
map_por.set('nivelSuperadoEficiente', "Parabéns, passou o nível!!\nEncontrou também a solução mais eficiente. Muito bem!!");
map_por.set('errorTestcase', "ERRO. Os casos de teste têm de terminar com a instrução assert(state).");
map_por.set('errorIdentificador1', "ERRO. O identificador ");
map_por.set('errorIdentificador2', " já existe.");
map_por.set('afirmaNoAvanza', "  assert(not_forwards)");
map_por.set('afirmaPincha', "  assert(stabbed)");
map_por.set('afirmaChoca', "  assert(collides)");
map_por.set('afirmaNoCae', "  assert(not_falls)");
map_por.set('errorTestcaseIdentacion', "ERRO. As instruções dentro da estrutura testcase devem respeitar a indentação Python.");
map_por.set('errorTestcaseBucles', "ERRO. Não pode haver ciclos dentro de uma estrutura de testcase!!");
map_por.set('errorTestcaseCondidiones', "ERRO. Não pode haver condicionadores dentro de uma estrutura de teste!!");
map_por.set('errorTestcaseCombinados', "ERRO. Não se podem combinar testcases!! Terminar este e depois inicia outro.");
map_por.set('errorAfirnaIdentado', "ERROR. A instrução assert() tem de respeitar a indentação de Python!!");
map_por.set('errorOraculoNoExiste', "ERRO. Oráculo não existe. Oráculos disponíveis: not_forwards, stabbed, collides, not_falls");
map_por.set('errorParametroNoExiste', "ERRO. O tipo do parâmetro está errado. As instruções de forward, turn e repeat recebem um número; as instruções if e assert recebem cordas.");
map_por.set('alert_gafas','Por passar ' + superados_gafas + ' nível o teu robô tem UM PAR DE ÓCULOS!!');
map_por.set('alert_gorro','Por passar ' + superados_gorro + ' níveis o teu robô tem UM CHAPÉU DE GRADUAÇÃO!!');
map_por.set('alert_gorrofiesta','Por passar ' + superados_gorrofiesta + ' níveis o teu robô tem UM CHAPÉU DE FESTA!!');
map_por.set('alert_esposas','Por passar ' + superados_esposas + ' níveis o teu robô tem UMAS ALGEMAS!!');
map_por.set('alert_lazo','Por passar ' + superados_lazo + ' níveis o teu robô tem UM LAÇO!!');
map_por.set('alert_medalla','Por passar ' + superados_medalla + ' níveis o teu robô tem UMA MEDALHA!!');
map_por.set('alert_coche','Por passar ' + superados_coche + ' níveis o teu robô tem UM CARRO!!');
map_por.set('btnUsuario', "Identificate");
map_por.set('btnClasificacion', "Classificação");
map_por.set('nivelesSuperados','¡¡PARABÉNS, PASSASTE TODOS OS NÍVEIS!!');
map_por.set('hola','Olá ');
map_por.set('nombre','Nome: ');
map_por.set('nombreUsuarioSalir','Introduza o seu nome para participar no ranking');

// ALEMAN
let map_ger = new Map();
map_ger.set('avanza', "forward");
map_ger.set('gira', "turn");
map_ger.set('titulo', "Einfaches Spiel zur Einführung in die Python-Programmierung");
map_ger.set('btnTraducir', "Ins Roboter übersetzen");
map_ger.set('btnEjecutar', "Programm ausführen");
map_ger.set('btnParar', "Stoppen");
map_ger.set('btnNivelMenos', "Level reduzieren");
map_ger.set('btnNivelMas', "Level erhöhen");
map_ger.set('nivel1', "''' LEVEL 1\nDieses Spiel hat ein Ziel: Den Roboter dazu bringen, das Ende des Levels zu erreichen.\n\nUm dies zu erreichen, müssen wir dem Charakter befehlen, bestimmte Bewegungen auszuführen - > Diese Bewegungen sind die Anweisungen des Programms, die in dieses Panel geschrieben werden müssen. Diese Anweisungen müssen in der Sprache Python geschrieben werden und werden in eine Sprache übersetzt, die der Roboter versteht, um sie zu laden und auszuführen.\n\nIn jedem Level wird eine Herausforderung anders präsentiert, um die Spielregeln Schritt für Schritt zu lernen. Wir werden verschiedene Hindernisse sehen, die unterschiedlich behandelt werden.\nDieses erste Level ist am einfachsten, versuchen Sie, den Befehl auszuführen...\n'''\n\nforward(4)");
map_ger.set('nivel2', "''' LEVEL 2\nWir haben bereits gesehen, wie das Spiel funktioniert und die Anweisung forward(x), wobei x die Anzahl der Felder ist, die der Roboter vorrückt.\n\nDiese zweite Level ist bereits vorhanden ein bisschen schwieriger. Jetzt brauchen wir etwas anderes. Versuchen Sie, die gezeigte Sequenz auszuführen...\n\n- Der Roboter dreht sich im Uhrzeigersinn mit dem Befehl turn(-x).\n- Der Roboter dreht sich gegen den Uhrzeigersinn mit der Anweisung turn(x).\n'''\n\nforward(5)\nturn(-1)");
map_ger.set('nivel3', "''' LEVEL 3\nJetzt führen wir ein neues Hindernis mit Stacheln ein. Es ist kleiner, aber gefährlicher!!. Lass es laufen, um zu sehen, was passiert, wenn du damit kollidierst...\n'''\n\nforward(6)");
map_ger.set('nivel4', "''' LEVEL 4\nDieses Level ist komplexer, da die erste Reihe von Hindernissen zufällig ist, sodass die Lösung des Levels jedes Mal anders ist.\n'''\n\nturn(-1)\nforward(2)\nturn(1)");
map_ger.set('nivel5', "''' LEVEL 5\nLevel 5 ist eine Variante von Level 4. Es gibt ein zufälliges Hindernis, das seine Position verändert. Seien Sie vorsichtig damit und Sie werden das Level bestehen!!\n'''\n\nforward(5)");
map_ger.set('nivel6', "''' LEVEL 6\nSeien Sie vorsichtig mit diesem Level, mit nur einem falschen Zug können Sie in einer Sackgasse landen!!\n'''\n\nforward(5)") ;
map_ger.set('nivel7', "''' LEVEL 7\nDas Spiel wird schon ziemlich kompliziert. Auch dieses Level ist zufällig, aber wir werden eine neue Struktur einführen: BEDINGUNGEN.\nBedingungen basieren auf der Gewissheit von a Bedingung, um bestimmte Anweisungen auszuführen. Wenn die Bedingung nicht erfüllt ist, werden sie nicht ausgeführt.\nHINWEIS: Die Bedingungen, die der Roboter versteht, hängen von seiner Ausrichtung auf dem Brett ab: south_robot, east_robot, north_robot und west_robot. Um Ihnen weiter zu helfen, zeigt der Roboter gerade nach Norden. Schau auf den Kompass. Damit solltest du schon Bedingungen verwenden können!!\n\nWICHTIG: Sei sehr vorsichtig mit Leerzeichen, da es genauso passiert wie im Fall von repeat(x):\n '''\n\nif(north_robot):\n  forward(1)\n  turn(-1)\nif(west_robot):\n  turn(1)\n  forward(2)\n  turn(-1)");
map_ger.set('nivel8', "''' LEVEL 8\nWir machen Fortschritte im Spiel. Level 12 und 13 sind, wie Sie sehen können, darauf ausgelegt, das neueste Konzept des Spiels zu vermitteln.\nLevel 8 bringt nichts neu, aber es ist eines der am schwierigsten zu meisternden Levels!!\nEs ist ein völlig zufälliges Level, mit Ausnahme der letzten Reihe von allen, die, wenn es auch zufällig gewesen wäre, den Zugang zur letzten Plattform schließen könnten und das Level unmöglich wäre zu schlagen.\n'''\n\nforward(9)");
map_ger.set('nivel9', "''' LEVEL 9\nIn diesem Level werden die Wiederholungen von Bewegungen (Loops) eingeführt. Um das Schreiben von viel Text zu vermeiden, können Wiederholungen erstellt werden.\n\nVersuchen Sie, den Code auszuführen, den wir anbieten, und beachten Sie sorgfältig die Leerzeichen, die vor den Anweisungen innerhalb der Wiederholung verbleiben.\nHINWEIS: Wenn Sie nicht STRENG 2 Leerzeichen lassen, wird das, was Sie unter die Wiederholung (x) eingeben, nicht wiederholt:\n'''\n\nrepeat(4):\n  forward(2)\n  turn(1)");
map_ger.set('nivel10', "''' LEVEL 10\nWir führen nun das Konzept einer sich wiederholenden Schleife mit einer Bedingung ein, die die darin enthaltenen Anweisungen ausführt, solange die Bedingung erfüllt ist.\n\nAchtung! Um die Eingabe einer Endlosschleife Der Roboter stoppt, nachdem er die Anweisungen " + repeticiones_permitidas + " wiederholt hat.\n'''\n\nwhile(no_crash):\n  forward(2)\n  turn(1)");
map_ger.set('nivel11', "''' LEVEL 11\nDieses Level ist völlig zufällig und es gibt nur einen Raum, den Sie durchlaufen können, also seien Sie sehr vorsichtig, um dieses Level zu meistern.\nEs wird empfohlen, dieses Level zu meistern, mehr als einmal zu versuchen, um die verschiedenen möglichen Lösungen zu testen.\n'''\n\nforward(6)\nturn(-1)");
map_ger.set('nivel12', "''' LEVEL 12\nIn diesem Level, das das Spiel fast beendet, wird das Konzept des Code-Testens eingeführt. Testen ist ein weit verbreitetes Werkzeug, um den Code durch Testfälle auf den Status zu validieren das Programm nach einer Reihe von Ereignissen, die den Zustand ändern.\n\nFUNKTION: Die folgende Struktur ist unten zu sehen. Den Testfällen muss eine Kennung gegeben werden, um das Ergebnis zu sehen. Das Format der Kennung muss Testfall sein und eine Zahl ohne Leerzeichen (siehe unten).\nDann müssen wir eine Reihe von Anweisungen eingeben, die den Status des Programms ändern. Schreiben Sie schließlich das Orakel, das den Status darstellt, den wir nach der Ausführung der Anweisungen überprüfen möchten. \nORACLE: Die Anweisung affirms(state) ist diejenige, die das Orakel repariert. Die möglichen Zustände sind not_advance (überprüfen Sie, ob der Roboter mit einem glatten Hindernis kollidiert ist), sticht (überprüfen Sie, dass der Roboter mit einem spitzen Hindernis kollidiert ist), kollidiert (überprüfen Sie, dass der Roboter die Grenzen des Bretts erreicht hat) und does not_fall ( vergewissern Sie sich, dass der Roboter nicht ins Leere fällt).\n'''\n\ntestcase1: #Dies ist die Kennung\n forward(4) #Dies ist die Folge von Anweisungen\n assert(stabbed) #Dies ist das Orakel");
//map_ger.set('nivel13', "''' LEVEL 13\nVerwenden Sie nun dem Konzept des Codetestens folgend die Wiederholungen von Bewegungen oder die Wiederholungsschleife mit einer Bedingung.....\n'''\n\ntestcase1:\n  mientras(no_choca):\n    avanza(2)\n    gira(1)");
map_ger.set('nivel13', "''' LEVEL 13\nMit diesem Level endet das Spiel. Es ist das am schwierigsten zu lösende Level, also heißt dieses Level zu meistern, das Spiel zu meistern.\nVersuchen Sie vorher, einige Testfälle durchzuführen Level lösen!\n'''\n\ntestcase1:\n  turn(-1)\n  forward(3)\n  assert(stabbed)");
map_ger.set('nivel14', "''' LEVEL 14\nEste nivel es especial, trata de encontrar una solución general para resolver cualquier nivel que no tenga pinchos.\n'''\n\nmientras(no_choca):\n  gira(1)\n  avanza(1)\n\nmientras(no_choca):\n  gira(1)\n  avanza(1)");
map_ger.set('traducidoOK', " ** Programm erfolgreich übersetzt **");
map_ger.set('errorComentario', "Fehler, fehlt ''' um den Kommentar zu schließen!!");
map_ger.set('avisoPinchos', "WARNUNG!! Der Roboter ist mit den Stachel kollidiert...");
map_ger.set('robotCaido', "Der Roboter ist ins Leere gefallen :( , versuche es noch einmal!!!");
map_ger.set('nivelSuperado', "Herzlichen Glückwunsch, Sie haben das Level bestanden!!");
map_ger.set('errorRepite', "FEHLER. Sie können ein repeat() nicht innerhalb eines anderen repeat() machen");
map_ger.set('errorInstruccion1', 'FEHLER. Die Anweisung ');
map_ger.set('errorInstruccion2', ' existiert nicht...');
map_ger.set('errorParentesis', "FEHLER mit den Klammern, die Struktur ist: Anweisung(Parameter).\nZum Beispiel: forward(5)");
map_ger.set('errorParametro', "FEHLER. Sie haben keinen Eingabeparameter eingegeben.");
map_ger.set('errorEstructura', "FEHLER. Strukturen müssen mit dem Zeichen ':' enden\nZum Beispiel: repeat(6):");
map_ger.set('errorBucle', "FEHLER. Kann keine Schleife mit repeat(x) innerhalb einer Bedingung starten.");
map_ger.set('errorCondicional', "FEHLER. Sie können eine Bedingung nicht innerhalb einer anderen Bedingung beginnen.\nUm weitere Bedingungen zu erstellen, tun Sie dies in einer anderen Zeile.");
map_ger.set('errorCondicionalRepite', "FEHLER. Bedingungen können nicht innerhalb einer Wiederholung (x) erstellt werden.");
map_ger.set('errorWhile', "FEHLER. Du kannst eine Weile nicht innerhalb einer anderen Weile machen.");
map_ger.set('errorWhileBucle', "FEHLER. Schleifen können innerhalb einer Weile nicht erstellt werden.");
map_ger.set('errorWhileCondiciones', "FEHLER. Bedingungen können nicht innerhalb einer Weile erstellt werden.");
map_ger.set('errorBajarNivel', "Kann das Level nicht mehr verringern!!");
map_ger.set('errorSubirNivel', "Kann das Level nicht mehr erhöhen!!");
map_ger.set('robotNorte', "north_robot");
map_ger.set('robotSur', "south_robot");
map_ger.set('robotEste', "east_robot");
map_ger.set('robotOeste', "west_robot");
map_ger.set('errorCondicionNoExiste', "Bedingung NICHT vorhanden...\nBedingungen: north_robot, south_robot, east_robot, west_robot");
map_ger.set('errorEstructuraNoExiste', "FEHLER. Falsche Struktur.");
map_ger.set('nivelSuperado', "Herzlichen Glückwunsch, Sie haben das Level bestanden!!\nDie Lösung ist nicht die effizienteste. Versuchen Sie, das Level mit weniger Anweisungen oder mit kleineren Parametern zu bestehen!!");
map_ger.set('nivelSuperadoEficiente', "Herzlichen Glückwunsch, Sie haben das Level bestanden!!\nAußerdem haben Sie die effizienteste Lösung gefunden. Sehr gut!!");
map_ger.set('errorTestcase', "FEHLER. Testfälle müssen mit der Anweisung assert(state) enden.");
map_ger.set('errorIdentificador1', "FEHLER. Die Kennung ");
map_ger.set('errorIdentificador2', " existiert bereits.");
map_ger.set('afirmaNoAvanza', "  assert(not_forwards)");
map_ger.set('afirmaPincha', "  assert(stabbed)");
map_ger.set('afirmaChoca', "  assert(collides)");
map_ger.set('afirmaNoCae', "  assert(not_falls)");
map_ger.set('errorTestcaseIdentacion', "FEHLER. Anweisungen innerhalb der Testfallstruktur müssen die Python-Einrückung berücksichtigen.");
map_ger.set('errorTestcaseBucles', "FEHLER. Innerhalb einer Testfallstruktur dürfen keine Schleifen sein!!");
map_ger.set('errorTestcaseCondiciones', "FEHLER. Es dürfen keine Bedingungen innerhalb einer Testfallstruktur sein!!");
map_ger.set('errorTestcaseCombinados', "FEHLER. Testfälle können nicht kombiniert werden!! Beenden Sie diesen und starten Sie einen anderen.");
map_ger.set('errorAfirnaIdentado', "FEHLER. Die assert()-Anweisung muss die Python-Einrückung berücksichtigen!!");
map_ger.set('errorOraculoNoExiste', "FEHLER. Oracle existiert nicht. Oracles verfügbar: not_forwards, stabbed, collides, not_falls");
map_ger.set('errorParametroNoExiste', "FEHLER. Der Typ des Parameters ist falsch. Die Vorwärts-, Rotieren- und Wiederholen-Anweisungen erhalten eine Zahl; die Wenn- und Bestätigen-Anweisungen erhalten Textzeichenfolgen");
map_ger.set('alert_gafas','Für das Bestehen von ' + superados_gafas + ' Level hat dein Roboter einen BRILLE bekommen!!');
map_ger.set('alert_gorro','Für das Bestehen von ' + superados_gorro + ' Levels hat dein Roboter einen KAPPE erreicht!!');
map_ger.set('alert_gorrofiesta','Für das Bestehen von ' + superados_gorrofiesta + ' Levels hat dein Roboter einen PARTY HAT erreicht!!');
map_ger.set('alert_esposas','Für das Bestehen von ' + superados_esposas + ' Levels hat dein Roboter einen HANDCUFFS erreicht');
map_ger.set('alert_lazo','Für das Bestehen von ' + superados_lazo + ' Levels hat dein Roboter einen HAARSCHLEIFE erreicht');
map_ger.set('alert_medalla','Für das Bestehen von ' + superados_medalla + ' Levels hat dein Roboter einen MEDAL erreicht');
map_ger.set('alert_coche','Für das Bestehen von ' + superados_coche + ' Levels hat dein Roboter ein CAR erreicht');
map_ger.set('btnUsuario', "Identifizieren");
map_ger.set('btnClasificacion', "Ranking");
map_ger.set('nivelesSuperados','HERZLICHEN GLÜCKWUNSCH, SIE HABEN ALLE LEVEL BESTANDEN!!');
map_ger.set('nombreUsuario','Bitte geben Sie Ihren Namen an.');
map_ger.set('hola','Hallo ');
map_ger.set('nombre','Namen: ');
map_ger.set('nombreUsuarioSalir','Indica tu nombre para participar en la clasificación.');

// JAPONES
let map_jpn = new Map();
map_jpn.set('avanza', "forward");
map_jpn.set('gira', "turn");
map_jpn.set('titulo', "Python プログラミングを紹介する簡単なゲーム");
map_jpn.set('btnTraducir', "ロボットに翻訳");
map_jpn.set('btnEjecutar', "プログラムの実行");
map_jpn.set('btnParar', "プログラムを停止");
map_jpn.set('btnNivelMenos', "レベルを下げる");
map_jpn.set('btnNivelMas', "レベルを上げる");
map_jpn.set('nivel1', "''' LEVEL 1\nこのゲームには 1 つの目標があります: ロボットをレベルの最後に到達させることです。\n\nこれを達成するには、キャラクターに特定の動きをさせるよう命令する必要があります - > これらの動きはプログラムの命令であり、このパネルに記述する必要があります。これらの命令は Python 言語で記述する必要があり、ロボットがそれらを読み込んで実行するために理解できる言語に翻訳されます。\n\nそれぞれでレベルでは、ゲームのルールを段階的に学習するために、さまざまな課題が提示されます。さまざまな障害物の扱いが異なります。\nこの最初のレベルが最も簡単です。コマンドを実行してみてください...\n'''\n\nforward(4)");
map_jpn.set('nivel2', "''' LEVEL 2\nゲームの仕組みと命令の前進 (x) については既に説明しました。ここで、x はロボットが前進する正方形の数です。\n\nこの 2 番目のレベルはすでにもう少し難しい問題です。次は何か別のことが必要です。示されているシーケンスを実行してみてください...\n\n- コマンド turn(-x) でロボットは時計回りに回転します。\n- ロボットは命令 turn(x) で反時計回りに回転します。 ).\n'''\n\nforward(5)\nturn(-1)");
map_jpn.set('nivel3', "''' LEVEL 3\n今度はとげのある新しい障害物を紹介します。これは小さいですが、より危険です!!.実行して、衝突するとどうなるかを確認してください...\n'''\n\nforward(6)");
map_jpn.set('nivel4', "''' LEVEL 4\n障害物の最初の列がランダムであるため、このレベルはより複雑です。そのため、レベルの解決策は毎回異なります.\n'''\n\nturn(-1)\nforward(2)\nturn(1)");
map_jpn.set('nivel5', "''' LEVEL 5\nレベル 5 はレベル 4 のバリアントです。位置が変化するランダムな障害物があります。注意してください。レベルを通過できます!!\n'''\n\nforward(5)");
map_jpn.set('nivel6', "''' LEVEL 6\nこのレベルは注意してください。1 つの操作を間違えると行き止まりになります!!\n'''\n\nforward(5)") ;
map_jpn.set('nivel7', "''' LEVEL 7\nゲームはすでにかなり複雑になっています。このレベルもランダムですが、新しい構造を導入します: CONDITIONALS.\n条件は、特定の命令を実行するための条件。条件が満たされない場合、それらは実行されません。\nヒント: ロボットが理解する条件は、ボード上の向きによって異なります: south_robot, east_robot, north_robot, west_robot。ロボットは今、自分で北を見てください。コンパスを見てください。これで、すでに条件を使用できるようになっているはずです!!\n\n重要: スペースには十分注意してください。これは、repeat(x) の場合と同じように発生するためです:\n'''\n\nif(north_robot):\n  forward(1)\n  turn(-1)\nif(west_robot):\n  turn(1)\n  forward(2)\n  turn(-1)");
map_jpn.set('nivel8', "''' LEVEL 8\nゲームを進めています。レベル 12 と 13 は、ご覧のとおり、ゲームの最新のコンセプトを教えるために設計されています。\nレベル 8 は何ももたらしません。新しい ですが、倒すのが最も難しいレベルの 1 つです!!\n最後の行を除いて完全にランダムなレベルです。これもランダムだった場合、最終プラットフォームへのアクセスが閉じられ、レベルが不可能になる可能性があります\n'''\n\nforward(9)");
map_jpn.set('nivel9', "''' LEVEL 9\nこのレベルでは、動きの繰り返し (ループ) が導入されています。多くのテキストを書かないようにするために、繰り返しを作成できます。\n\nを提供し、繰り返し内の指示の前に残されたスペースを注意深く観察してください。\n注意: 厳密に 2 つのスペースを残さないと、repeat(x) の下に入力した内容は繰り返されません:\n'''\n\nrepeat(4):\n  forward(2)\n  turn(1)");
map_jpn.set('nivel10', "''' LEVEL 10\nここで、条件が満たされている間、ループに含まれる命令を実行する、条件付きの反復ループの概念を導入します。\n\n警告!無限ループ ロボットは、" + repeticiones_permitidas + " 命令を繰り返した後に停止します。\n'''\n\nwhile(no_crash):\n  forward(2)\n  turn(1)");
map_jpn.set('nivel11', "''' LEVEL 11\nこのレベルは完全にランダムで、通過できるスペースは 1 つだけなので、このレベルをクリアするには十分に注意してください。\nこれをクリアすることをお勧めします\n'''\n\nforward(6)\nturn(-1)");
map_jpn.set('nivel12', "''' LEVEL 12\nこのレベル 12 では、ほぼゲームが終了し、コード テストの概念が導入されます。テストは、状態に関するテスト ケースを通じてコードを検証するために広く使用されているツールです。状態を変更する一連のイベントの後のプログラム。\n\n機能: 従うべき構造を以下に示します。結果を表示するには、テスト ケースに識別子を指定する必要があります。識別子の形式はテストケースである必要があります。 \n次に、プログラムの状態を変更する一連の命令を入力する必要があります。最後に、命令の実行後に確認する状態であるオラクルを記述します。 \nORACLE: 命令 affirms(state) は、オラクルを修正する命令です。可能な状態は、not_advance (ロボットが滑らかな障害物に衝突したことを確認する)、pricks (ロボットがとがった障害物に衝突したことを確認する)、collides (ロボットがボードの限界に達したことを確認する)、および not_fall ( \n'''\n\ntestcase1: #これは識別子です\nadvance(4) #これは一連の指示です\n assert(stabbed) #これはオラクル" );
//map_jpn.set('nivel13', "''' LEVEL 13\nコードテストの概念を引き継ぎ、今度は動作の繰り返しや条件付きのループの繰り返しを利用する。\n'''\n\ntestcase1:\n  while(no_crash):\n    forward(2)\n    turn(1)");
map_jpn.set('nivel13', "''' LEVEL 13\nこのレベルでゲームは終了します。解決するのが最も難しいレベルなので、このレベルをクリアすることはゲームをクリアすることです。\n前にいくつかのテスト ケースを試してみてくださいレベルを解いてください!\n'''\n\ntestcase1:\n  turn(-1)\n  forward(3)\n  assert(stabbed)");
map_jpn.set('nivel14', "''' NIVEL 14\nこのレベルは特別で、どんなレベルでも解けるように一般的な解法を見つけようとします。\n'''\n\nwhile(no_crash):\n  turn(1)\n  forward(1)");
map_jpn.set('traducidoOK', " ** プログラムは正常に翻訳されました **");
map_jpn.set('errorComentario', "エラー、コメントを閉じるための ''' がありません!!");
map_jpn.set('avisoPinchos', "警告!!ロボットが串に衝突しました...");
map_jpn.set('robotCaido', "ロボットが空洞に落ちました :( , 再試行!!!");
map_jpn.set('nivelSuperado', "おめでとうございます。合格です!!");
map_jpn.set('errorRepite', "エラー。repeat() を別の repeat() 内で実行することはできません");
map_jpn.set('errorInstruccion1', 'エラー。命令');
map_jpn.set('errorInstruccion2', '存在しません...');
map_jpn.set('errorParentesis', "括弧付きのエラー。構造は次のとおりです: instruction(parameter).\n例: forward(5)");
map_jpn.set('errorParametro', "エラー。入力パラメーターが入力されていません。");
map_jpn.set('errorEstructura', "エラー。構造は文字 ':' で終わる必要があります\n例: repeat(6):");
map_jpn.set('errorBucle', "エラー。条件内で repeat(x) を使用してループを開始できません。");
map_jpn.set('errorCondicional', "エラー。別の条件内で条件を開始することはできません。\nさらに条件を作成するには、別の行で実行してください。");
map_jpn.set('errorCondicionalRepite', "エラー。repeat(x) 内に条件を作成することはできません。");
map_jpn.set('errorWhile', "エラー。別の while 内で while を実行することはできません。");
map_jpn.set('errorWhileBucle', "エラー。while 内にループを作成できません。");
map_jpn.set('errorWhileCondiciones', "エラー。しばらくすると条件を作成できません。");
map_jpn.set('errorBajarNivel', "これ以上レベルを下げることはできません!!");
map_jpn.set('errorSubirNivel', "これ以上レベルを上げることはできません!!");
map_jpn.set('robotNorte', "north_robot");
map_jpn.set('robotSur', "south_robot");
map_jpn.set('robotEste', "east_robot");
map_jpn.set('robotOeste', "west_robot");
map_jpn.set('errorCondicionNoExiste', "条件が存在しません...\n条件: north_robot, south_robot, east_robot, west_robot");
map_jpn.set('errorEstructuraNoExiste', "エラー。構造が間違っています。");
map_jpn.set('nivelSuperado', "おめでとう、レベルに合格しました!!\n解決策は最も効率的ではありません。より少ない命令またはより小さなパラメータでレベルに合格するようにしてください!!");
map_jpn.set('nivelSuperadoEficiente', "おめでとうございます。レベルに合格しました!!\nまた、最も効率的な解決策を見つけました。とても良いです!!");
map_jpn.set('errorTestcase', "エラー。テストケースはステートメント assert(state) で終了する必要があります。");
map_jpn.set('errorIdentificador1', "エラー。識別子");
map_jpn.set('errorIdentificador2', "既に存在します。");
map_jpn.set('afirmaNoAvanza', "  assert(not_forwards)"); 
map_jpn.set('afirmaPincha', "  assert(stabbed)");
map_jpn.set('afirmaChoca', "  assert(collides)");
map_jpn.set('afirmaNoCae', "  assert(not_falls)");
map_jpn.set('errorTestcaseIdentacion', "エラー。テストケース構造内のステートメントは、Python インデントを尊重する必要があります。");
map_jpn.set('errorTestcaseBucles', "エラー。テストケース構造内にループを含めることはできません!!");
map_jpn.set('errorTestcaseCondiciones', "エラー。テストケース構造内に条件を含めることはできません!!");
map_jpn.set('errorTestcaseCombinados', "エラー。テストケースを結合できません!! これを終了してから、別のテストケースを開始してください。");
map_jpn.set('errorAfirnaIdentado', "エラー。assert() ステートメントは Python のインデントを尊重する必要があります!!");
map_jpn.set('errorOraculoNoExiste', "エラー。Oracle が存在しません。利用可能な Oracle : not_forwards, stabbed, collides, not_falls");
map_jpn.set('errorParametroNoExiste', "エラー。パラメータの型が間違っています。フォワード、ローテーション、およびリピート命令は数値を受け取ります。if および肯定命令はテキスト文字列を受け取ります");
map_jpn.set('alert_gafas', superados_gafas + 'つのレベルをクリアすると、あなたのロボットはメガネを獲得しました!');
map_jpn.set('alert_gorro', superados_gorro + 'つのレベルをクリアすると、あなたのロボットはキャップを獲得します!');
map_jpn.set('alert_gorrofiesta', superados_gorrofiesta + 'つのレベルをクリアすると、あなたのロボットはパーティーハットを手に入れることができます!');
map_jpn.set('alert_esposas', superados_esposas + 'つのレベルをクリアすると、あなたのロボットは手錠を獲得しました!');
map_jpn.set('alert_lazo', superados_lazo + 'レベルをクリアすると、ロボットがなげなわを手に入れます!');
map_jpn.set('alert_medalla', superados_medalla + 'つのレベルをクリアすると、あなたのロボットはメダルを手に入れることができます!');
map_jpn.set('alert_coche', superados_coche + 'つのレベルをクリアすると、あなたのロボットは車を手に入れることができます!');
map_jpn.set('btnUsuario', "識別");
map_jpn.set('btnClasificacion', "ランキング");
map_jpn.set('nivelesSuperados','おめでとうございます。すべてのレベルをクリアしました!!');
map_jpn.set('nombreUsuario','お名前をお書きください');
map_jpn.set('hola','こんにちは ');
map_jpn.set('nombre','名称 ');
map_jpn.set('nombreUsuarioSalir','Iランキングに参加するには、お名前を入力してください');